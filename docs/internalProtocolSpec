cloudBox Protocol
Version 1

Copyright 2012 - 2014 the cloudBox team, under BSD-2 Clause Modified License.

Terminologies:
Disconnect the server/client - Send a Disconnect packet with the appropriate DisconnectType, then close the connection.
StateRepository - A dictionary holding a player's state (information).


0x00 - Keep Alive
Two-way
Used by: HubServer, WorldServer, WebServer
Direction: * <-> *

Both ways
Packet Data:
None

Handling of packet (both ways):
Indicates the opposite side is still "alive". If opposite side do not send a keep-alive after the timeout period
(? seconds is recommended), the server assumes that the opposite side has unexpectedly disconnected, and performs
relevant cleanups.



0x01 - Handshake
Two-way
Used by: HubServer, WorldServer, WebServer
Direction: Client -> Server, Server -> Client

Client to Server
Packet Data:
ClientName: String - The client's name
ClientType: Int - The client's type. Must be an integer defined in cloudbox.common.constants.common.SERVER_TYPES

Server to Client
Packet Data:
ServerName: String - The server's name
ServerType: Int - The server's type. Must be an integer defined in cloudbox.common.constants.common.SERVER_TYPES
ClientID: Int - The client's ID assigned to the

Handling of packet (Server to Client):
When a client connects, server must immediately check if the client is within its accepted client range. If the client
is not in the whitelist, disconnect with a Disconnect packet. Server should then expect a Handshake packet. If the
client sends anything other than the Handshake packet, disconnect the client.
Upon receiving the packet, perform other necessary checks, If conditions are not met, disconnect the client.
If there are no problems, register the client and send a Handshake packet indicating an establishment of the
connection. Server can then starting data to the client.

Handling of packet (Client to Server):
When connection is made, client must send a Handshake packet, and wait for either a Disconnect packet, or a Handshake
packet indicating successful handshaking.

0x02 - Callback
Two-way
Used by: HubServer, WebServer, WorldServer
Direction: * <-> *

Both ways
Packet Data:
isSuccess: Whether the original call succeeded.
data: The callback data.

0x30 - State Update
Two-way
Used by: HubServer, WorldServer
Direction: * <-> *

Both ways
Packet Data:
clientID: The client's session ID the sender wishes to update. Must be an integer.
clientState: A dictionary of any state the sender wishes to update. If omitted, delete all entries.
keysToDelete: A list of any keys to delete. Optional.

Handling of packet (Both Ways):
Both sides are expected to overwrite values as specified in the packet. Permissions to override should be checked before
the packet is sent.

0x31 - New Player
Server to Client
Used by: HubServer, WorldServer
Direction: Hub -> World (opposite direction should not be used in most circumstances)

Server to Client
Packet Data:
sessionID: The Player's session ID.

Handling of packet (Both Ways):
Both sides are expected to create the Player and store it in the players dictionary. This packet is only for bookkeeping
purposes; it should only be used after the connection has been established. Additional details of the Player should
immediately be sent using the State Update packet.


0x32 - Delete Player
Two-way (usually client to server)
Used by: HubServer, WorldServer
Direction: * <-> *

Both ways
Packet Data:
sessionID: The Player's session ID

Handling of packet (Both Ways):
Both sides are expected to delete the Player from the players dictionary and do any subsequent cleanups if required.
This packet is only for bookkeeping purposes; it should only be used after the relevant disconnection packets has been
sent, or the player actively dropped the connection.

0x32 - Load World
Server to Client
HubServer -> WorldServer

PacketData:
worldID: WorldID